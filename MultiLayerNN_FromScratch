#### TO TEST THE FILE JUST PLACE iris.csv IN THE CURRENT WORKING DIRECTORY AND CHANGE THE PATH AT LINE 14 ####

import numpy as np

import os
import csv
import pandas as pd
import numpy as np
from numpy import recfromcsv
import urllib
import random
from random import *


df = np.loadtxt("C:/Users/USER/.jupyter/iris.csv", delimiter= "," , dtype=object, skiprows=0) 


matrix = df
matrix[matrix == 'Iris-setosa'] = 1.0
matrix[matrix == 'Iris-versicolor'] = 2.0
matrix[matrix == 'Iris-virginica'] = 3.0
matrix = matrix.astype(np.float)
np.random.shuffle(matrix)
X_data = np.array(matrix[: , 0:4])
y_data = np.array(matrix[: , 4:])
y_data = y_data.astype(np.float64)
#x_train = x[:int(len(x)*0.7)]
#x_test = x[-int(len(x)*0.3):]
#y_train = y[:int(len(y)*0.7)]
#y_test = y[-int(len(y)*0.3):]

#print(y_data.shape)
#print(X_data.shape)
#print(y_data)
#print(X_data)



def sigmoid(Net):
    return 1.0/(1+ np.exp(-Net))

def sigmoid_derivative(sigmoid):
    return sigmoid * (1.0 - sigmoid)

def derErr_wrt_Out(y, output):
    return -1*(y - output)


        
if __name__ == "__main__":

    lr = 0.1
    
    X = X_data
    #X = np.array([[0.6, 0.9, 0.88, 0.1], [0.4, 0.6, 0.5, 0.55], [0.4, 0.5, 0.6, 0.48], [0.7, 0.8, 0.86, 0.9]])                                 
    X = np.c_[X, np.ones(X.shape[0])]
    
    y = y_data
    #y = np.array([[0], [2], [2], [50]])                                  
    
    print(X)
    print(X.shape)
    print(y)
    print(y.shape)
    
    
    weightsInputLayertoH1 = np.array([[0.15, 0.2, 0.3, 0.2]])
    weightsInputLayertoH1 = np.c_[weightsInputLayertoH1, np.ones(weightsInputLayertoH1.shape[0])] 

    weightsInputLayertoH2 = np.array([[0.25, 0.30, 0.8, 0.9]])
    weightsInputLayertoH2 = np.c_[weightsInputLayertoH2, np.ones(weightsInputLayertoH2.shape[0])]
   
    weightsInputLayertoH3 = np.array([[0.6, 0.5, 0.2, 0.65]])
    weightsInputLayertoH3 = np.c_[weightsInputLayertoH3, np.ones(weightsInputLayertoH3.shape[0])]

    weightsHiddenLayertoOutput = np.array([[0.4, 0.45, 0.75]])
    weightsHiddenLayertoOutput = np.c_[weightsHiddenLayertoOutput, np.ones(weightsHiddenLayertoOutput.shape[0])]
    
    OutputVector = np.zeros((y.shape)) 
    
    OutHiddenLayer = np.zeros((1, 3))
    OutHiddenLayer = np.c_[OutHiddenLayer, np.ones(OutHiddenLayer.shape[0])]
    
    for epochs in range(500):
        for r in range(X.shape[0]):
        
            NetH1 = np.dot(X[r,:], weightsInputLayertoH1.T)

            NetH2 = np.dot(X[r,:], weightsInputLayertoH2.T)
            
            NetH3 = np.dot(X[r,:], weightsInputLayertoH3.T)

            OutH1 = sigmoid(NetH1)

            OutH2 = sigmoid(NetH2)

            OutH3 = sigmoid(NetH3)
            
            
            OutHiddenLayer[0,0] = OutH1
            OutHiddenLayer[0,1] = OutH2
            OutHiddenLayer[0,2] = OutH3
            

            NetOutput = np.dot(OutHiddenLayer, weightsHiddenLayertoOutput.T)
            
            OutOutput = NetOutput
            

            
            # Calculate the total Error

            Etotal = 1/2*(((y[r,0]-OutOutput)**2))
            

            # The backward pass: derivative w.r.t Error for all weights in the outer layer

            deriv_weightsHiddenLayertoOutput = np.zeros((1,OutHiddenLayer.shape[1]))
                        
            deriv_weightsHiddenLayertoOutput[0,0] = derErr_wrt_Out(y[r,0], OutOutput) * OutHiddenLayer[0,0]
            
            deriv_weightsHiddenLayertoOutput[0,1] = derErr_wrt_Out(y[r,0], OutOutput) * OutHiddenLayer[0,1]
            
            deriv_weightsHiddenLayertoOutput[0,2] = derErr_wrt_Out(y[r,0], OutOutput) * OutHiddenLayer[0,2]
            
            deriv_weightsHiddenLayertoOutput[0,3] = derErr_wrt_Out(y[r,0], OutOutput) * OutHiddenLayer[0,3]


            # The backward pass: derivative w.r.t Error for all weights in the hidden layer

            deriv_weightsInputLayertoH1 = np.zeros((1,X.shape[1]))
            deriv_weightsInputLayertoH2 = np.zeros((1,X.shape[1]))
            deriv_weightsInputLayertoH3 = np.zeros((1,X.shape[1]))
            
            for c in range(X.shape[1]) :

                deriv_weightsInputLayertoH1[0,c] = ((derErr_wrt_Out(y[r,0], OutOutput) * weightsHiddenLayertoOutput[0,0]) *(sigmoid_derivative(OutHiddenLayer[0,0]))*X[r,c])

                deriv_weightsInputLayertoH2[0,c] = ((derErr_wrt_Out(y[r,0], OutOutput) * weightsHiddenLayertoOutput[0,1]) *(sigmoid_derivative(OutHiddenLayer[0,1]))*X[r,c])

                deriv_weightsInputLayertoH3[0,c] = ((derErr_wrt_Out(y[r,0], OutOutput) * weightsHiddenLayertoOutput[0,2]) *(sigmoid_derivative(OutHiddenLayer[0,2]))*X[r,c])

                deriv_weightsInputLayertoH3[0,c] = ((derErr_wrt_Out(y[r,0], OutOutput) * weightsHiddenLayertoOutput[0,3]) *(sigmoid_derivative(OutHiddenLayer[0,3]))*X[r,c])

                

            # Update weights

            for i in range(X.shape[1]):
                weightsInputLayertoH1[:, i] = weightsInputLayertoH1[:, i] - lr * deriv_weightsInputLayertoH1[:, i]
                weightsInputLayertoH2[:, i] = weightsInputLayertoH2[:, i] - lr * deriv_weightsInputLayertoH2[:, i]
                weightsInputLayertoH3[:, i] = weightsInputLayertoH3[:, i] - lr * deriv_weightsInputLayertoH3[:, i]
                                                    
                                                    
            for i in range(weightsHiddenLayertoOutput.shape[1]):
                weightsHiddenLayertoOutput[:, i] = weightsHiddenLayertoOutput[:, i] - lr * deriv_weightsHiddenLayertoOutput[:, i]
                
    
            OutputVector[r, 0] = np.round(OutOutput)
            
            accuracy=sum(OutputVector == y)/(len(y))
            
    print(OutputVector)
    print(accuracy)
