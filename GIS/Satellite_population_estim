Python code to estimate Health Zones population density based on Satellite Images of Kinshasa, DRC 


#####################################################################################
# Create the geoprocessor object
import arcgisscripting, sys
gp = arcgisscripting.create()

# We want to join Households to Clusters and calculate the sum of Households population for each Cluster

targetFeatures = "C:/Users/USER/Desktop/Pop_Estimation/GeoDB.gdb/Clusters"
joinFeatures = "C:/Users/USER/Desktop/Pop_Estimation/GeoDB.gdb/Households"

# Output will be the target features, Clusters, with a Households population sum field (hps)
outfc = "C:/Users/USER/Desktop/Pop_Estimation/GeoDB.gdb/Clusters_hps"

# Create a new fieldmappings and add the two input feature classes.
fieldmappings = gp.CreateObject("FieldMappings")
fieldmappings.AddTable(targetFeatures)
fieldmappings.AddTable(joinFeatures)

# First get the POP fieldmap. POP is a field in the Households feature class.
# The output will have the Clusters with the attributes of the Households. Setting the
# field's merge rule to ‘sum’ will aggregate the values for all of the Households for
# each Cluster into a sum value. The field is also renamed to be more appropriate
# for the output.
fieldmap = fieldmappings.GetFieldMap(fieldmappings.FindFieldMapIndex("POP"))

# Get the output field's properties as a field object
field = fieldmap.OutputField

# Rename the field and pass the updated field object back into the field map
field.Name = "sum_households_pop"
field.AliasName = "sum_households_pop"
fieldmap.OutputField = field

# Set the merge rule to sum and then replace the old fieldmap in the mappings object
# with the updated one
fieldmap.MergeRule = "sum"
fieldmappings.ReplaceFieldMap(fieldmappings.FindFieldMapIndex("POP"), fieldmap)

#Run the Spatial Join tool, using the defaults for the join operation and join type
gp.SpatialJoin(targetFeatures, joinFeatures, outfc, "#", "#", fieldmappings)

#####################################################################################

#####################################################################################
arcpy.CalculateField_management("Clusters_hps","ClusterPOPm2",'!sum_households_pop!/!Shape_Area!',"PYTHON")

#####################################################################################

#####################################################################################
# Create the geoprocessor object
import arcgisscripting, sys
gp = arcgisscripting.create()
# We want to join Clusters to Density Areas and calculate various descriptive statistics (mean, max, min, median)
# of Clusters population density (pop/m2) for each Density Area
targetFeatures = "C:/Users/USER/Desktop/Pop_Estimation/GeoDB.gdb/Density_Areas"
joinFeatures = "C:/Users/USER/Desktop/Pop_Estimation/GeoDB.gdb/Clusters_hps"

# Output will be the target features, Density Areas, with a Clusters population density field
outfc = "C:/Users/USER/Desktop/Pop_Estimation/GeoDB.gdb/Density_Areas_POPm2"
# Create a new fieldmappings and add the two input feature classes.
fieldmappings = gp.CreateObject("FieldMappings")
fieldmappings.AddTable(targetFeatures)
fieldmappings.AddTable(joinFeatures)
# First get the ClusterPOPm2 fieldmap. ClusterPOPm2 is a field in the Clusters feature class.
# The output will have the Density Areas with the attributes of the Clusters. Setting the
# field's merge rule to 'mean', 'max', 'min', or 'median' will aggregate the values for all of the Clusters for
# each Density Area into a value. The field is also renamed to be more appropriate
# for the output.
fieldmap = fieldmappings.GetFieldMap(fieldmappings.FindFieldMapIndex("ClusterPOPm2"))
# Get the output field's properties as a field object
field = fieldmap.OutputField
# Rename the field and pass the updated field object back into the field map
field.Name = "POPm2_mean"
field.AliasName = "POPm2_mean"
fieldmap.OutputField = field
# Set the merge rule to the desired descriptive statistic and then replace the old fieldmap in the mappings object
# with the updated one
fieldmap.MergeRule = "mean"
fieldmappings.ReplaceFieldMap(fieldmappings.FindFieldMapIndex("ClusterPOPm2"), fieldmap)
#Run the Spatial Join tool, using the defaults for the join operation and join type
gp.SpatialJoin(targetFeatures, joinFeatures, outfc, "#", "#", fieldmappings)

#####################################################################################

#####################################################################################
import os
import csv
import sys
import numpy as np
import pandas as pd
import math
import matplotlib.pyplot as plt
df = np.loadtxt("C:/Users/USER/Desktop/Pop_Estimation/DAs_Attributes_Table.txt", delimiter= "," , dtype=object, skiprows=1) 
for i in range(len(df)):
    for q in range(df.shape[1]):
        if df[i, q]=="":
            df[i,q]=0 
for i in range(len(df)):
    for q in range(df.shape[1]):
        if df[i, q]==" ":
            df[i,q]=0 
               
for i in range(len(df)):
    if df[i,1]=="High Density Urban Residential":
        df[i,1]=1
    elif df[i,1]=="Medium-high Density Urban Residential":
        df[i,1]=2
    elif df[i,1]=="Medium-low Density Urban Residential":
        df[i,1]=3
    elif df[i,1]=="Low Density Urban Residential":
        df[i,1]=4
    elif df[i,1]=="Non-residential":
        df[i,1]=5
    elif df[i,1]=="Rural Residential":
        df[i,1]=6    
    elif df[i,1]=="Mixed Use Urban Commercial/Residential":
        df[i,1]=7
          
    
for i in range(len(df)):
    for q in range(df.shape[1]):
        df[i, q]=float(df[i, q])
    
sum=0
count=0
for i in range(len(df)):
    if df[i,1]==1 and df[i,2]!=0:
        count += 1
        sum=sum+df[i,2]
        mean_1=sum/count
sum=0
count=0
for i in range(len(df)):
    if df[i,1]==2 and df[i,2]!=0:
        count += 1
        sum=sum+df[i,2]
        mean_2=sum/count
sum=0
count=0
for i in range(len(df)):
    if df[i,1]==3 and df[i,2]!=0:
        count += 1
        sum=sum+df[i,2]
        mean_3=sum/count
sum=0
count=0
for i in range(len(df)):
    if df[i,1]==4 and df[i,2]!=0:
        count += 1
        sum=sum+df[i,2]
        mean_4=sum/count

sum=0
count=0
for i in range(len(df)):
    if df[i,1]==5 and df[i,2]!=0:
        count += 1
        sum=sum+df[i,2]
        mean_5=sum/count
sum=0
count=0
for i in range(len(df)):
    if df[i,1]==6 and df[i,2]!=0: 
        count += 1
        sum=sum+df[i,2]
        mean_6=sum/count

sum=0
count=0
for i in range(len(df)):
    if df[i,1]==7 and df[i,2]!=0:
        count += 1
        sum=sum+df[i,2]
        mean_7=sum/count
   
               
print("Mean pop/m2 for High Density Urban Residential is", mean_1)
print("Mean pop/m2 for Medium-high Density Urban Residential is", mean_2)
print("Mean pop/m2 for Medium-low Density Urban Residential is", mean_3)
print("Mean pop/m2 for Low Density Urban Residential is", mean_4)
print("Mean pop/m2 for Non-residential is", mean_5)
print("Mean pop/m2 for Rural Residential is", mean_6)
print("Mean pop/m2 for Mixed Use Urban Commercial/Residential is", mean_7)
 
mean_1 = np.array(mean_1*1000)
mean_2 = np.array(mean_2*1000)
mean_3 = np.array(mean_3*1000)
mean_4 = np.array(mean_4*1000)
mean_5 = np.array(mean_5*1000)
mean_6 = np.array(mean_6*1000)
mean_7 = np.array(mean_7*1000)

mean_pops = np.concatenate(([mean_1], [mean_2], [mean_3], [mean_4], [mean_5], [mean_6], [mean_7]),axis=0)
mean_pops

avg_means = np.average(mean_pops)

plt.bar([1, 2, 3, 4, 5, 6, 7], mean_pops)
plt.ylabel('Population/Km2')
plt.show()

####################### Here we assign the calculated pop. densities to all DAs

import arcpy
from arcpy import env

# Set environment variables

env.workspace = r"C:/Users/USER/Desktop/Pop_Estimation/GeoDB.gdb"

inputData = "Density_Areas_POPm2"

# Set the program variables and print data types
in_feature_class = env.workspace+'/'+inputData

fields_list = arcpy.ListFields(in_feature_class)
for field in fields_list:
    print("{0} is a type of {1} with a length of {2}"
          .format(field.name, field.type, field.length))
fields = ['label', 'POPm2_mean']
with arcpy.da.UpdateCursor(env.workspace+'/'+inputData, fields) as cursor:
		for row in cursor:
			if (row[0] == 'High Density Urban Residential'):
				row[1] = mean_1
			elif (row[0] == 'Medium-high Density Urban Residential'): 
				row[1] = mean_2
			elif (row[0] == 'Medium-low Density Urban Residential'): 
				row[1] = mean_3
			elif (row[0] == 'Low Density Urban Residential'): 
				row[1] = mean_4
			elif (row[0] == 'Non-residential'): 
				row[1] = mean_5
			elif (row[0] == 'Rural Residential'): 
				row[1] = mean_6
			elif (row[0] == 'Mixed Use Urban Commercial/Residential'): 
				row[1] = mean_7
			else: row[1] = 0
			cursor.updateRow(row)
			print(row[1])
		del cursor


#####################################################################################

#####################################################################################
arcpy.SpatialJoin_analysis("Density_Areas_POPm2", "Health_Zones", "DA_HZ", "JOIN_ONE_TO_MANY", "KEEP_ALL", "#", "WITHIN")
#####################################################################################
